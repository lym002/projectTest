package com.jsjf.service.integral.impl;

import com.alibaba.fastjson.JSONObject;
import com.jsjf.common.BaseResult;
import com.jsjf.dao.integral.TaskIntegralRulesDao;
import com.jsjf.dao.member.DrMemberFundsRecordDAO;
import com.jsjf.model.integral.TaskIntegralRules;
import com.jsjf.service.integral.TaskIntegralRulesService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class TaskIntegralRulesServiceImpl implements TaskIntegralRulesService{

    private transient static Logger log = Logger.getLogger(TaskIntegralRulesServiceImpl.class);

    @Autowired
    private TaskIntegralRulesDao taskIntegralRulesDao;
    @Autowired
    private DrMemberFundsRecordDAO drMemberFundsRecordDAO;

    @Override
    public int deleteByPrimaryKey(Integer id) {
        return taskIntegralRulesDao.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(TaskIntegralRules record) {
        return taskIntegralRulesDao.insert(record);
    }

    @Override
    public int insertSelective(TaskIntegralRules record) {
        return taskIntegralRulesDao.insertSelective(record);
    }

    @Override
    public TaskIntegralRules selectByPrimaryKey(Integer id) {
        return taskIntegralRulesDao.selectByPrimaryKey(id);
    }

    @Override
    public int updateByPrimaryKeySelective(TaskIntegralRules record) {
        return taskIntegralRulesDao.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKey(TaskIntegralRules record) {
        return taskIntegralRulesDao.updateByPrimaryKey(record);
    }

    /***
     * 查询任务进度
     * @param uid
     * @return
     */
    @Override
    public BaseResult selectMyTask(Integer uid) {
        BaseResult br = new BaseResult();
        //查询每日任务完成进度参数
        Map<String, Object> param = new HashMap<>();
        Map<String, Object> resultMap = new HashMap<>();
        JSONObject jsonObject = null;
        List<Object> maps = new ArrayList<>();
        boolean flag = false;
        int taskSize = 0;
        try {
            //查询今天用户的数据
            Date date = new Date();
            param.put("uid", uid);
            param.put("startTime", date);
            param.put("endTime", date);
            List<TaskIntegralRules> taskIntegralRulesList = taskIntegralRulesDao.selectByType(1);
            for (TaskIntegralRules rules : taskIntegralRulesList) {
                if (rules.getTaskType().equals("充值")) {
                    //查询今日充值的数据
                    param.put("tradeType", 1);
                    taskSize = drMemberFundsRecordDAO.selectMemberFundsRecordListCountByParam(param);
                    if (taskSize > 0) {//完成任务
                        flag = true;
                        taskSize = 1;
                    }
                } else if (rules.getTaskType().equals("投资")) {
                    param.put("tradeType", 3);
                    taskSize = drMemberFundsRecordDAO.selectMemberFundsRecordListCountByParam(param);
                    if (taskSize > 0) {//完成任务
                        flag = true;
                        taskSize = 1;
                    }
                } else if (rules.getTaskType().equals("邀请投资")) {
                    continue;
                } else if (rules.getTaskType().equals("邀请注册")) {
                    continue;
                } else if (rules.getTaskType().equals("转发")) {
                    continue;
                }
                jsonObject = new JSONObject();
                jsonObject.put("taskName", rules.getTaskType());
                jsonObject.put("taskFinish", taskSize);
                jsonObject.put("taskStatus", flag);
                maps.add(jsonObject);
            }
            //将日常任务存入map
            resultMap.put("dailyTask", maps);
            //清空数据
            param.clear();

            //查询新手任务完成进度
            maps = new ArrayList<>();
            param.put("uid", uid);
            taskIntegralRulesList = taskIntegralRulesDao.selectByType(0);
            for (TaskIntegralRules rules : taskIntegralRulesList) {
                if (rules.getTaskType().equals("首次充值")) {
                    //查询今日充值的数据
                    param.put("tradeType", 1);
                    taskSize = drMemberFundsRecordDAO.selectMemberFundsRecordListCountByParam(param);
                    if (taskSize > 0) {//完成任务
                        flag = true;
                        taskSize = 1;
                    }
                } else if (rules.getTaskType().equals("首次投资")) {
                    param.put("tradeType", 3);
                    taskSize = drMemberFundsRecordDAO.selectMemberFundsRecordListCountByParam(param);
                    if (taskSize > 0) {//完成任务
                        flag = true;
                        taskSize = 1;
                    }
                } else if (rules.getTaskType().equals("实名认证")) {
                    continue;
                }
                jsonObject = new JSONObject();
                jsonObject.put("taskName", rules.getTaskType()); // 任务名字
                jsonObject.put("taskFinish", taskSize);           //任务完成度
                jsonObject.put("taskStatus", flag);              //任务完成状态（true/false）
                maps.add(jsonObject);
            }
            resultMap.put("newUserTask", maps);
            br.setMap(resultMap);
        }catch (Exception e){
            param.clear();
            jsonObject.clear();
            maps.clear();
            log.error("查询任务错误！",e);
            br.setErrorCode("9999");
            br.setErrorMsg("系统错误！");
        }
        return br;
    }

}