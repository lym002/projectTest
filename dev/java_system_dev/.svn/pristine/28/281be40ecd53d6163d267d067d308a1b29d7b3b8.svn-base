package com.jsjf.controller.task;

import com.jsjf.common.ConfigUtil;
import com.jsjf.common.SerializeUtil;
import com.jsjf.service.activity.ActivityReversalService;
import com.jsjf.service.member.DrMemberCarryService;
import com.jsjf.service.member.DrMemberFundsService;
import com.jsjf.service.member.DrMemberService;
import com.jsjf.service.system.impl.RedisClientTemplate;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * 邀请好友红包返现 定时任务
 *
 * @author xxq
 */
@Component
public class ActivityReversalTask {
    private static Logger log = Logger.getLogger(ActivityReversalTask.class);
    @Autowired
    DrMemberService drMemberService;
    @Autowired
    DrMemberCarryService drMemberCarryService;
    @Autowired
    public ActivityReversalService activityReversalService;
    @Autowired
    private RedisClientTemplate redisClientTemplate;
    @Autowired
    private DrMemberFundsService drMemberFundsService;

    /**
     * 定义每半小时执行一次好友邀请返现任务
     */
    @Scheduled(cron = "0 0/30 * * * ?")
    public void insertFriendMemberActivityAmount() {
        try {
            log.info("=============================开始邀请好友红包返现");
            //activityReversalService.reversal();
            activityReversalService.reversals();
            //落地页：定时查询好友邀请返现总额的排名
            activityReversalService.selectReversal();

        } catch (Exception e) {
            log.error(e.getMessage());
            e.printStackTrace();
        }
        log.info("=============================邀请好友红包返现完成");
    }

    /**
     * 复投返现定时任务
     */
    @Scheduled(cron = "0 10 11 09 4 ?")
    public void transferToClient() {
        /*String msg = "复投返现活动";
        String msgs="抢标补发";
        String value = String.valueOf(System.currentTimeMillis());
        try {
            tryLockUserCash(msg, 3889, new BigDecimal("120"), value);
        } catch (Exception e) {
            log.error("复投返现失败" + e.getMessage());
            //log.error("补发红包" + e.getMessage());
        }*/
        try {//修复红包失败插入redis
            insetRedis(52, 4396, 6375, "CP-20180403132306638284");
            insetRedis(52, 9461, 6376, "CP-20180403132306638284");
            insetRedis(52, 9461, 6377, "CP-20180403132306638284");
            insetRedis(52, 5188, 6378, "CP-20180403132306638284");
            insetRedis(52, 5188, 6379, "CP-20180403132306638284");
            insetRedis(52, 5188, 6380, "CP-20180403132306638284");
            insetRedis(52, 2630, 6381, "CP-20180403132306638284");
            insetRedis(52, 4435, 6383, "CP-20180403132306638284");
            insetRedis(52, 2630, 6384, "CP-20180403132306638284");
            insetRedis(52, 2630, 6385, "CP-20180403132306638284");
            insetRedis(52, 4435, 6388, "CP-20180403132306638284");
            insetRedis(52, 4435, 6389, "CP-20180403132306638284");
            insetRedis(52, 4435, 6390, "CP-20180403132306638284");
            insetRedis(52, 4435, 6391, "CP-20180403132306638284");
            insetRedis(52, 8997, 6392, "CP-20180403132306638284");
            insetRedis(52, 8997, 6393, "CP-20180403132306638284");
        } catch (Exception e) {
            log.error("抢标活动返现" + e.getMessage());
        }
    }

    private void insetRedis(int tpye, int uid, int investId, String projectOn) {
        Map<String, Object> backMap = new HashMap<String, Object>(); // 返回参数的map
        // 放到 redis 缓存
        Map<String, Object> crushBackMap = new HashMap<String, Object>();
        crushBackMap.put("type", tpye);
        crushBackMap.put("uid", uid);
        crushBackMap.put("investId", investId);
        crushBackMap.put("project_no", projectOn);
        backMap.put("crushBackMap", crushBackMap);
        redisClientTemplate.lpush("regAndVerifySendRedUidList".getBytes(),
                SerializeUtil.serialize(backMap.get("crushBackMap")));
    }

    private void tryLockUserCash(String msg, Integer uid, BigDecimal bigDecimal, String value) {
        try {
            boolean relockFlag;
            relockFlag = redisClientTemplate.tryLock(ConfigUtil.AboutTheCash + uid, 30, TimeUnit.SECONDS, false, value);// 枷锁
            if (relockFlag) {
                activityReversalService.transferToClient(uid, bigDecimal, msg);
            }
        } catch (Exception e) {
            log.error("复投返现错误,用户id为" + uid + ":" + e.getMessage());
        } finally {
            redisClientTemplate.releaseLock(ConfigUtil.AboutTheCash + uid, value);//解锁
        }

    }

    /**
     * 定时任务批量修复提现失败
     *
     * @param
     */
    @Scheduled(cron = "0 50 16 9 2 ?")
    public void repairWithdrawal() {                //流水号                   提现金额
        drMemberFundsService.updateRepairWithdrawal("201802091016252939096683", new BigDecimal("5035.88"));
        drMemberFundsService.updateRepairWithdrawal("201802091127462775532175", new BigDecimal("10071.32"));
        drMemberFundsService.updateRepairWithdrawal("201802090722087437393453", new BigDecimal("5034.66"));
    }

    /**
     * 修复失败冻结到冻结
     */
    @Scheduled(cron = "0 30 13 23 3 ?")
    public void repairFreeze() {
        try {
            Map<String, Object> mapFreeze = new HashMap<String, Object>();
            mapFreeze.put("type", 53);
            mapFreeze.put("pid", "511");
            redisClientTemplate.lpush(
                    "regAndVerifySendRedUidList".getBytes(),
                    SerializeUtil.serialize(mapFreeze));
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }

}