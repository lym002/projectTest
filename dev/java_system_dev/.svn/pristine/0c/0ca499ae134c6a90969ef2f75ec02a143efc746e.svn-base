package com.jsjf.controller.task;

import com.jsjf.common.SerializeUtil;
import com.jsjf.service.system.impl.RedisClientTemplate;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import com.jsjf.service.activity.ActivityReversalService;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

/**
 * 邀请好友红包返现 定时任务
 * @author xxq
 *
 */
@Component
public class ActivityReversalTask {
	private static Logger log = Logger.getLogger(ActivityReversalTask.class);

	@Autowired
	public ActivityReversalService activityReversalService;
	@Autowired
	private RedisClientTemplate redisClientTemplate;

	/**
	 * 定义每半小时执行一次好友邀请返现任务
	 */
	@Scheduled(cron="0 0/30 * * * ?") 
   	public void insertFriendMemberActivityAmount() {
    	try {
    		log.info("=============================开始邀请好友红包返现");
    		//activityReversalService.reversal();
    		activityReversalService.reversals();
    		//落地页：定时查询好友邀请返现总额的排名
    		activityReversalService.selectReversal();
    		
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
		}
    	log.info("=============================邀请好友红包返现完成");
   	}
	/**
	 * 给两个没有获取到红包返现的用户返现一次性功能.
	 */
	@Scheduled(cron = "0 08 18 * * ?")//11点执行
	public void reissueUserDemo() {
		try {
            Map<String, Object> map1 = new HashMap<String,Object>();
            map1.clear();
            map1.put("type", 8);
            map1.put("bidAmt",new BigDecimal(58));
            map1.put("investId",546);
            map1.put("uid",7596);
            redisClientTemplate.lpush("regAndVerifySendRedUidList".getBytes(),SerializeUtil.serialize(map1));
			/*Map<String, Object> backMap = new HashMap<String, Object>(); // 返回参数的map
			Map<String, Object> crushBackMap = new HashMap<String, Object>();
			crushBackMap.put("type", 52);
			crushBackMap.put("uid", 2592);
			crushBackMap.put("investId", 106);
			crushBackMap.put("project_no", null);
			backMap.put("crushBackMap", crushBackMap);
			redisClientTemplate.lpush("regAndVerifySendRedUidList".getBytes(),
					SerializeUtil.serialize(backMap.get("crushBackMap")));
			crushBackMap.clear();
			backMap.clear();
			crushBackMap.put("type", 52);
			crushBackMap.put("uid", 1486);
			crushBackMap.put("investId", 106);
			crushBackMap.put("project_no", null);
			backMap.put("crushBackMap", crushBackMap);
			redisClientTemplate.lpush("regAndVerifySendRedUidList".getBytes(),
					SerializeUtil.serialize(backMap.get("crushBackMap")));*/
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}